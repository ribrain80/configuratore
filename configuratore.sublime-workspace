{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"hor",
				"hor_line_shoulder"
			],
			[
				"vert",
				"vert_line_shoulder"
			],
			[
				"sh",
				"vert_text_shoulder"
			],
			[
				"de",
				"depth"
			],
			[
				"make",
				"makeDrawerLabel"
			],
			[
				"rect_bo",
				"rect_bounding_client_rect"
			],
			[
				"rect",
				"rect_stroke"
			],
			[
				"rect_",
				"rect_leftmost"
			],
			[
				"trasa",
				"translation_y"
			],
			[
				"transla",
				"translation_y"
			],
			[
				"maker",
				"makeRect"
			],
			[
				"fon",
				"font_size"
			],
			[
				"dra",
				"drawer_text"
			],
			[
				"te",
				"text_stroke"
			],
			[
				"line",
				"line_stroke"
			],
			[
				"rec",
				"rect_stroke"
			],
			[
				"d",
				"drawer_text"
			],
			[
				"update",
				"updateDrawer"
			],
			[
				"back",
				"background-color"
			],
			[
				"drawer",
				"drawerID"
			],
			[
				"Drawer",
				"DrawerType"
			],
			[
				"col",
				"col-lg-3 \tBootstrap 3 Class"
			],
			[
				"col-lg",
				"col-lg-3 \tBootstrap 3 Class"
			],
			[
				"btn",
				"btn-info \tBootstrap 3 Class"
			]
		]
	},
	"buffers":
	[
		{
			"file": "resources/views/split/master.blade.php",
			"settings":
			{
				"buffer_size": 400,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "config/languages.php",
			"settings":
			{
				"buffer_size": 102,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "var step2 = new Vue({\n\n    el: '#drawer_dimensions',\n\n    data: {\n\n        // # Container element\n        container: {},\n\n        // # Config vars\n        config: {\n            rect_stroke: '#999999',\n            rect_linewidth: 7,\n            line_stroke: '#222222',\n            text_stroke: '#222222',\n            font_size: 12,\n            font_family: 'Raleway',\n            font_weight: 'normal',\n            drawer_text: 'Cassetto',\n            shoulder_stroke: '#999999',\n            shoulder_linewidth: 7,\n            shoulder_text: \"Sponda\"\n        },\n\n        // # Container dimensions\n        canvas_width: 0,\n        canvas_height: 0,\n\n        // # Data bound\n        length: 100,\n        width: 100,\n        depth: 20,\n\n        // # Two instance\n        two: {},\n        \n        // # Rect objects\n        rect: {},\n        hor_line_rect: {},\n        hor_text_rect: \"\",\n        vert_text_rect: {},\n        vert_line_rect: {},\n        drawer_text: {},\n\n        // # Shoulder objects\n        shoulder: {},\n        hor_line_shoulder: {},\n        hor_text_shoulder: \"\",\n        vert_text_shoulder: {},\n        vert_line_shoulder: {},\n        shoulder_text: {}\n    },\n\n    methods: {\n\n        /**\n         * Inits the Two object container and every shape needed in its initial state\n         * @return {[void]}\n         */\n        inittwo: function () {\n\n            // # TWO Instance\n            this.two = new Two({ width: 300, height: 300, autostart: true }).appendTo( this.container );\n\n            // # Drawer\n            this.makeRect( 50, 100, 100, 100, 20, 0 );\n            \n            // # Width line ( drawer )\n            this.makeRectWidthInfoLine( 18, 30, 120, 30 );\n\n            // # Width text ( drawer )\n            this.makeRectWidthInfoText( 70, 15 );\n\n            // # Length line ( drawer )\n            this.makeRectLengthInfoLine( 140, 50, 140, 150 );\n\n            // # Length text ( drawer )\n            this.makeRectLengthInfoText( 160, 100 );\n\n            // # Drawer label\n            this.makeDrawerLabel( 70, 100 );\n\n            // # Rectangle ( Shoulder )\n            this.makeShoulder( 70, 200, 100, 30 );\n\n            // # Width line ( shoulder )\n            this.makeShoulderWidthInfoLine( 17, 230, 124, 230 );\n\n            // # Width text ( shoulder )\n            this.makeShoulderWidthInfoText( 75, 240 );\n\n            // # Length line ( shoulder )\n            this.makeShoulderLengthInfoLine( 140, 180, 140, 217 );\n\n            // # Length text ( shoulder )\n            this.makeShoulderLengthInfoText( 160, 200 );            \n\n            // # Shoulder label\n            this.makeShoulderLabel( 70, 200 );\n        },\n\n        /**\n         * [makeShoulderWidthInfoLine description]\n         * @param  {[type]} x1 [description]\n         * @param  {[type]} y1 [description]\n         * @param  {[type]} x2 [description]\n         * @param  {[type]} y2 [description]\n         * @return {[type]}    [description]\n         */\n        makeShoulderWidthInfoLine: function( x1, y1, x2, y2 ) {\n\n            this.hor_line_shoulder = this.two.makeLine( x1, \n                                                        y1, \n                                                        x2, \n                                                        y2 );\n                                                        \n            this.hor_line_shoulder.stroke = this.config.line_stroke;  \n        },\n\n        /**\n         * [makeShoulderWidthInfoText description]\n         * @param  {[type]} x [description]\n         * @param  {[type]} y [description]\n         * @return {[type]}   [description]\n         */\n        makeShoulderWidthInfoText: function( x, y ) {\n\n            this.hor_text_shoulder = this.two.makeText( this.length + \" cm\", \n                                                        x, \n                                                        y, \n                                                        this.config.font_weight );\n\n            this.hor_text_shoulder.size = this.config.font_size;\n            this.hor_text_shoulder.stroke = this.config.text_stroke;\n            this.hor_text_shoulder.family = this.config.font_family; \n        },\n\n        /**\n         * [makeShoulderLengthInfoLine description]\n         * @param  {[type]} x1 [description]\n         * @param  {[type]} y1 [description]\n         * @param  {[type]} x2 [description]\n         * @param  {[type]} y2 [description]\n         * @return {[type]}    [description]\n         */\n        makeShoulderLengthInfoLine: function( x1, y1, x2, y2 ) {\n\n            // # Length line ( drawer )\n            this.vert_line_shoulder = this.two.makeLine( x1, \n                                                         y1, \n                                                         x2, \n                                                         y2 );\n\n            this.vert_line_shoulder.stroke = this.config.line_stroke;\n        },\n\n        /**\n         * [makeShoulderLengthInfoText description]\n         * @param  {[type]} x [description]\n         * @param  {[type]} y [description]\n         * @return {[type]}   [description]\n         */\n        makeShoulderLengthInfoText: function( x, y ) {\n\n            // # Length text ( drawer )\n            this.vert_text_shoulder = this.two.makeText( this.depth + \" cm\", \n                                                         x, \n                                                         y,\n                                                         this.config.font_weight );\n\n            this.vert_text_shoulder.size = this.config.font_size;\n            this.vert_text_shoulder.stroke = this.config.text_stroke;\n            this.vert_text_shoulder.family = this.config.font_family;\n            this.vert_text_shoulder.rotation = Math.PI/2;\n        },     \n\n        /**\n         * [makeShoulderLabel description]\n         * @param  {[type]} x [description]\n         * @param  {[type]} y [description]\n         * @return {[type]}   [description]\n         */\n        makeShoulderLabel: function( x, y ) {\n\n            this.shoulder_text = this.two.makeText( this.config.shoulder_text,\n                                                    x, \n                                                    y, \n                                                    this.config.font_weight );\n\n            this.shoulder_text.size = this.config.font_size;\n            this.shoulder_text.stroke = this.config.text_stroke;\n            this.shoulder_text.family = this.config.font_family;\n        },\n\n        /**\n         * [makeRect description]\n         * @param  {[type]} x             [description]\n         * @param  {[type]} y             [description]\n         * @param  {[type]} width         [description]\n         * @param  {[type]} length        [description]\n         * @param  {[type]} translation_x [description]\n         * @param  {[type]} translation_y [description]\n         * @return {[type]}               [description]\n         */\n        makeRect: function( x, y, width, length, translation_x, translation_y ) {\n\n            // # Rectangle ( drawer )\n            this.rect = this.two.makeRectangle( x, y, width, length );\n            this.rect.linewidth = this.config.rect_linewidth;\n            this.rect.stroke = this.config.rect_stroke;\n            this.rect.translation.x += translation_x;\n            if( translation_y > 0 ) {\n                this.rect.translation.y = translation_y;\n            }\n        },\n\n        /**\n         * [makeRectWidthInfoLine description]\n         * @param  {[type]} x1 [description]\n         * @param  {[type]} y1 [description]\n         * @param  {[type]} x2 [description]\n         * @param  {[type]} y2 [description]\n         * @return {[type]}    [description]\n         */\n        makeRectWidthInfoLine: function( x1, y1, x2, y2 ) {\n\n            // # Width line ( drawer )\n            this.hor_line_rect = this.two.makeLine( x1, y1, x2, y2 );\n            this.hor_line_rect.stroke = this.config.line_stroke;           \n        },\n\n        /**\n         * [makeRectWidthInfoText description]\n         * @param  {[type]} x [description]\n         * @param  {[type]} y [description]\n         * @return {[type]}   [description]\n         */\n        makeRectWidthInfoText: function( x, y ) {\n           \n            // # Width text ( drawer )\n            this.hor_text_rect = this.two.makeText( this.width + \" cm\", x, y, this.config.font_weight );\n            this.hor_text_rect.size = this.config.font_size;\n            this.hor_text_rect.stroke = this.config.text_stroke;\n            this.hor_text_rect.family = this.config.font_family; \n        },\n\n        /**\n         * [makeRectLengthInfoLine description]\n         * @param  {[type]} x1 [description]\n         * @param  {[type]} y1 [description]\n         * @param  {[type]} x2 [description]\n         * @param  {[type]} y2 [description]\n         * @return {[type]}    [description]\n         */\n        makeRectLengthInfoLine: function( x1, y1, x2, y2 ) {\n            \n            // # Length line ( drawer )\n            this.vert_line_rect = this.two.makeLine( x1, y1, x2, y2 );\n            this.vert_line_rect.stroke = this.config.line_stroke;\n        },\n\n        /**\n         * [makeRectLengthInfoText description]\n         * @param  {[type]} x [description]\n         * @param  {[type]} y [description]\n         * @return {[type]}   [description]\n         */\n        makeRectLengthInfoText: function( x, y ) {\n            \n            // # Length text ( drawer )\n            this.vert_text_rect = this.two.makeText( this.length + \" cm\", x, y, this.config.font_weight );\n            this.vert_text_rect.size = this.config.font_size;\n            this.vert_text_rect.stroke = this.config.text_stroke;\n            this.vert_text_rect.family = this.config.font_family;\n            this.vert_text_rect.rotation = Math.PI/2;\n        },\n\n        /**\n         * [makeShoulder description]\n         * @param  {[type]} x      [jdej3io]\n         * @param  {[type]} y      [description]\n         * @param  {[type]} width  [description]\n         * @param  {[type]} length [description]\n         * @return {[type]}        [description]\n         */\n        makeShoulder: function( x, y, width, length ) {\n\n            this.shoulder = this.two.makeRectangle( x, y, width, length );\n            this.shoulder.linewidth = this.config.shoulder_linewidth;\n            this.shoulder.stroke = this.config.shoulder_stroke;\n        },\n\n        /**\n         * [makeDrawerLabel description]\n         * @param  {[type]} x [description]\n         * @param  {[type]} y [description]\n         * @return {[type]}   [description]\n         */\n        makeDrawerLabel: function( x, y ) {\n\n            this.drawer_text = this.two.makeText( this.config.drawer_text, x, y, this.config.font_weight );\n            this.drawer_text.size = this.config.font_size;\n            this.drawer_text.stroke = this.config.text_stroke;\n            this.drawer_text.family = this.config.font_family;\n        },\n\n        /**\n         * Updates Drawer related objects on data change\n         * @return {[void]}\n         */\n        updateDrawer: function() {\n\n            // # Remove to redraw\n            this.two.clear();\n\n            // # Drawer\n            this.makeRect( this.width / 2, 100, this.width, this.length, 20, 50 + parseInt( this.length ) / 2 );\n\n            // # Get width line dimensions\n            var width_line_bounding_client_rect = this.hor_line_rect.getBoundingClientRect();\n\n            // # Get drawer dimensions\n            var rect_bounding_client_rect = this.rect.getBoundingClientRect();\n\n            // # Rightmost point\n            var rect_rightmost = rect_bounding_client_rect.right;\n\n            // # Topmost point\n            var rect_topmost = rect_bounding_client_rect.top;\n\n            // # Bottommost point\n            var rect_bottomomost = rect_bounding_client_rect.bottom;\n\n            // # Bottommost point\n            var rect_leftmost = rect_bounding_client_rect.left;\n\n            // # Drawer current width\n            var rect_width = rect_bounding_client_rect.width;\n\n            // # Drawer current height\n            var rect_height = rect_bounding_client_rect.height;\n\n            // # Width line ( drawer )\n            this.makeRectWidthInfoLine( rect_leftmost, 30, rect_rightmost, 30 );\n\n            // # Width text ( drawer )\n            this.makeRectWidthInfoText( ( rect_width / 2 ) + rect_leftmost, 15 );\n\n            // # Length line ( drawer )\n            this.makeRectLengthInfoLine( rect_rightmost + 20, rect_topmost, rect_rightmost + 20, rect_bottomomost );\n\n            // # Length text ( drawer )\n            this.makeRectLengthInfoText( rect_rightmost + 30,  ( rect_height / 2 ) + rect_topmost );\n\n            // # Drawer label text\n            this.makeDrawerLabel( rect_width/2 + rect_leftmost, rect_height/2 + rect_topmost );\n\n            // # Update shoulder cause length is a dimension also there\n            this.updateShoulder();\n        },\n\n        /**\n         * Updates Shoulder objects on data change\n         * @return {[type]} [description]\n         */\n        updateShoulder: function() {\n\n            // # Remove to redraw\n            this.two.remove( [ this.shoulder, this.vert_text_shoulder, \n                               this.vert_line_shoulder, this.hor_text_shoulder, \n                               this.hor_line_shoulder, this.shoulder_text ]);\n\n            var rect_bounding_client_rect = this.rect.getBoundingClientRect();\n\n            // # Shoulder redraw                \n            this.makeShoulder(  rect_bounding_client_rect.left + ( parseInt( this.length ) / 2 ) + 5, \n                                rect_bounding_client_rect.bottom + 40 + ( parseInt( this.depth ) ) / 2, \n                                this.length, \n                                this.depth);\n\n            // # Get drawer dimensions\n            var shoulder_bounding_client_rect = this.shoulder.getBoundingClientRect();\n\n            // # Rightmost point\n            var shoulder_rightmost = shoulder_bounding_client_rect.right;\n\n            // # Topmost point\n            var shoulder_topmost = shoulder_bounding_client_rect.top;\n\n            // # Bottommost point\n            var shoulder_bottomomost = shoulder_bounding_client_rect.bottom;\n\n            // # Bottommost point\n            var shoulder_leftmost = shoulder_bounding_client_rect.left;\n\n            // # Drawer current width\n            var shoulder_width = shoulder_bounding_client_rect.width;\n\n            // # Drawer current height\n            var shoulder_height = shoulder_bounding_client_rect.height;\n\n            // # Width line ( shoulder )\n            this.makeShoulderWidthInfoLine( shoulder_leftmost, \n                                            shoulder_bottomomost + 20, \n                                            shoulder_rightmost,\n                                            shoulder_bottomomost + 20 );\n\n            // # Width text ( shoulder )\n            this.makeShoulderWidthInfoText( shoulder_width/2 + 20,\n                                            shoulder_bottomomost + 30 );\n\n            // # Length line ( shoulder )\n            this.makeShoulderLengthInfoLine( shoulder_rightmost + 10, \n                                             shoulder_topmost, \n                                             shoulder_rightmost + 10, \n                                             shoulder_bottomomost );\n\n            // # Length text ( shoulder )\n            this.makeShoulderLengthInfoText( shoulder_rightmost + 30, \n                                           ( shoulder_height / 2 ) + shoulder_topmost  );            \n\n            // # Shoulder label\n            this.makeShoulderLabel(  shoulder_width/2 + shoulder_leftmost, shoulder_height/2 + shoulder_topmost );\n\n        },\n\n    },\n\n    mounted() { // # Window onload eq\n\n        // # Canvas element init\n        this.container = document.getElementById('animation');\n        //console.log( \"ready\");\n        //console.log( $( elem ).height() );\n        this.inittwo()\n    }\n\n});\n",
			"file": "resources/assets/js/split/step3.js",
			"file_size": 16382,
			"file_write_time": 131312145826615000,
			"settings":
			{
				"buffer_size": 16039,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "resources/assets/js/split/step4.js",
			"settings":
			{
				"buffer_size": 158,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "routes/web.php",
			"settings":
			{
				"buffer_size": 1593,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "app/Http/Controllers/SplitController.php",
			"settings":
			{
				"buffer_size": 1586,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "resources/views/split/step2.blade.php",
			"settings":
			{
				"buffer_size": 1866,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "resources/views/split/step3.blade.php",
			"settings":
			{
				"buffer_size": 1764,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "resources/views/split/step4.blade.php",
			"settings":
			{
				"buffer_size": 1488,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": ".env",
			"settings":
			{
				"buffer_size": 542,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 490.0,
		"last_filter": "insta",
		"selected_items":
		[
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"doc",
				"DocBlockr: Decorate line comment"
			],
			[
				"Format ",
				"CodeFormatter: Format Code"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"inst",
				"Package Control: Install Package"
			]
		],
		"width": 637.0
	},
	"console":
	{
		"height": 162.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) "
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/brambillari/Code/configuratore",
		"/C/Users/brambillari/Code/configuratore/app",
		"/C/Users/brambillari/Code/configuratore/app/Http/Controllers",
		"/C/Users/brambillari/Code/configuratore/app/Providers",
		"/C/Users/brambillari/Code/configuratore/config",
		"/C/Users/brambillari/Code/configuratore/database",
		"/C/Users/brambillari/Code/configuratore/database/migrations",
		"/C/Users/brambillari/Code/configuratore/database/seeds",
		"/C/Users/brambillari/Code/configuratore/public",
		"/C/Users/brambillari/Code/configuratore/public/build",
		"/C/Users/brambillari/Code/configuratore/public/build/css",
		"/C/Users/brambillari/Code/configuratore/public/build/js",
		"/C/Users/brambillari/Code/configuratore/public/js",
		"/C/Users/brambillari/Code/configuratore/public/js/lang",
		"/C/Users/brambillari/Code/configuratore/public/js/split",
		"/C/Users/brambillari/Code/configuratore/resources",
		"/C/Users/brambillari/Code/configuratore/resources/assets",
		"/C/Users/brambillari/Code/configuratore/resources/assets/js",
		"/C/Users/brambillari/Code/configuratore/resources/assets/js/components",
		"/C/Users/brambillari/Code/configuratore/resources/assets/js/split",
		"/C/Users/brambillari/Code/configuratore/resources/pdf",
		"/C/Users/brambillari/Code/configuratore/resources/views",
		"/C/Users/brambillari/Code/configuratore/resources/views/shared",
		"/C/Users/brambillari/Code/configuratore/resources/views/split",
		"/C/Users/brambillari/Code/configuratore/storage",
		"/C/Users/brambillari/Code/configuratore/storage/logs"
	],
	"file_history":
	[
		"/C/Users/brambillari/Code/configuratore/gulpfile.js",
		"/C/Users/brambillari/Code/configuratore/resources/assets/js/lang/en.json",
		"/C/Users/brambillari/Code/configuratore/public/js/split/step3.js",
		"/C/Users/brambillari/Code/configuratore/resources/views/m50/step3.blade.php",
		"/C/Users/brambillari/Code/configuratore/resources/views/split/step1.blade.php",
		"/C/Users/brambillari/Code/configuratore/resources/assets/css/main.css",
		"/C/Users/brambillari/Code/configuratore/resources/views/split/step3.blade.php",
		"/C/Users/brambillari/Code/configuratore/composer.json",
		"/C/Users/brambillari/Code/configuratore/.gitignore",
		"/C/Users/brambillari/Code/configuratore/routes/web.php",
		"/C/Users/brambillari/Code/configuratore/vendor/setasign/fpdi/fpdi.php",
		"/C/Users/brambillari/Code/configuratore/resources/views/split/step2.blade.php",
		"/C/Users/brambillari/Code/configuratore/app/Http/Controllers/PDFController.php",
		"/C/Users/brambillari/Code/configuratore/database/seeds/DrawertypesTableSeeder.php",
		"/C/Users/brambillari/Code/configuratore/app/Http/Controllers/SplitController.php",
		"/C/Users/brambillari/Code/configuratore/public/js/lang/en.json",
		"/C/Users/brambillari/Code/configuratore/resources/assets/js/lang/it.json",
		"/C/Users/brambillari/Code/configuratore/public/js/vendor.js",
		"/C/Users/brambillari/Code/configuratore/app/Providers/AppServiceProvider.php",
		"/C/Users/brambillari/Code/configuratore/app/Drawer.php",
		"/C/Users/brambillari/Code/configuratore/app/Divider.php",
		"/C/Users/brambillari/Code/configuratore/database/migrations/2017_01_31_144030_create_dividers_table.php",
		"/C/Users/brambillari/Code/configuratore/database/migrations/2017_01_31_144739_create_bridges_table.php",
		"/C/Users/brambillari/Code/configuratore/storage/logs/laravel-2017-01-31.log",
		"/C/Users/brambillari/Code/configuratore/resources/views/split/master.blade.php",
		"/C/Users/brambillari/Code/configuratore/resources/lang/it/messages.php",
		"/C/Users/brambillari/Code/configuratore/storage/logs/laravel-2017-01-30.log",
		"/C/Users/brambillari/Code/configuratore/routes/api.php",
		"/C/Users/brambillari/Code/configuratore/app/DrawerType.php",
		"/C/Users/brambillari/Code/configuratore/database/migrations/2017_01_27_142802_create_drawers_table.php",
		"/C/Users/brambillari/Code/configuratore/database/seeds/DatabaseSeeder.php",
		"/C/Users/brambillari/Code/configuratore/database/migrations/2017_01_27_154253_create_drawertypes_table.php",
		"/C/Users/brambillari/Code/configuratore/database/seeds/DrawerTableSeeder.php",
		"/C/Users/brambillari/Code/configuratore/database/seeds/DrawersTypesTableSeeder.php",
		"/C/Users/brambillari/Code/configuratore/database/migrations/2017_01_27_154253_create_drawerstypes_table.php",
		"/C/Users/brambillari/Code/configuratore/resources/lang/en/messages.php",
		"/C/Users/brambillari/Code/configuratore/resources/assets/js/split/step1.js",
		"/C/Users/brambillari/AppData/Roaming/Sublime Text 3/Packages/Emmet/Default (Windows).sublime-keymap",
		"/C/Users/brambillari/Code/configuratore/node_modules/buble/src/program/types/ForInStatement.js",
		"/C/Users/brambillari/Code/configuratore/node_modules/node-sass/src/libsass/Makefile",
		"/C/Users/brambillari/Code/configuratore/public/build/rev-manifest.json",
		"/C/Users/brambillari/Code/configuratore/public/build/js/vendor.js",
		"/C/Users/brambillari/Code/configuratore/public/build/js/vendor-95445bf00a.js",
		"/C/Users/brambillari/Code/configuratore/resources/assets/js/app.js",
		"/C/Users/brambillari/Code/configuratore/resources/assets/js/bootstrap.js",
		"/C/Users/brambillari/Code/configuratore/.bowerrc",
		"/C/Users/brambillari/Code/configuratore/app/Http/Controllers/Controller.php",
		"/C/Users/brambillari/Code/configuratore/config/app.php",
		"/C/Users/brambillari/Code/configuratore/app/Http/Controllers/Split/SplitController.php",
		"/C/Users/brambillari/Code/configuratore/elixir.json",
		"/C/Users/brambillari/Code/configuratore/.env",
		"/C/Users/brambillari/Code/configuratore/.env.example",
		"/C/Users/brambillari/Code/configuratore/storage/logs/laravel.log",
		"/C/Users/brambillari/Code/configuratore/public/js/step1.js"
	],
	"find":
	{
		"height": 43.0
	},
	"find_in_files":
	{
		"height": 117.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"makeShoulderLengthInfoLine",
			"makeShoulderWidthInfoText",
			"makeRectLengthInfoText",
			"makeRectWidthInfoText",
			"makeShoulderWidthInfoLine",
			"updatedrawer"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": false,
		"use_buffer2": false,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 9,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "resources/views/split/master.blade.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 400,
						"regions":
						{
						},
						"selection":
						[
							[
								304,
								304
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										335,
										338
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/tag.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										288,
										291
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"color_scheme": "Packages/User/Color Highlighter/themes/Monokai.tmTheme",
							"syntax": "Packages/Laravel Blade Highlighter/blade.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "config/languages.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 102,
						"regions":
						{
						},
						"selection":
						[
							[
								57,
								57
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										100,
										101
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/square_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										13,
										14
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"color_scheme": "Packages/User/Color Highlighter/themes/Monokai.tmTheme",
							"syntax": "Packages/PHP/PHP.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "resources/assets/js/split/step3.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16039,
						"regions":
						{
						},
						"selection":
						[
							[
								7434,
								7434
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"color_scheme": "Packages/User/Color Highlighter/themes/Monokai.tmTheme",
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3900.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "resources/assets/js/split/step4.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 158,
						"regions":
						{
						},
						"selection":
						[
							[
								146,
								146
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										151,
										152
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										122,
										123
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"color_scheme": "Packages/User/Color Highlighter/themes/Monokai.tmTheme",
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "routes/web.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1593,
						"regions":
						{
						},
						"selection":
						[
							[
								1497,
								1497
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										1497,
										1498
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/single_quote.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										1475,
										1476
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"color_scheme": "Packages/User/Color Highlighter/themes/Monokai.tmTheme",
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 540.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "app/Http/Controllers/SplitController.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1586,
						"regions":
						{
						},
						"selection":
						[
							[
								1568,
								1568
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										1568,
										1569
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/single_quote.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										1556,
										1557
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"color_scheme": "Packages/User/Color Highlighter/themes/Monokai.tmTheme",
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 480.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "resources/views/split/step2.blade.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1866,
						"regions":
						{
						},
						"selection":
						[
							[
								1039,
								972
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										976,
										981
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/tag.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										976,
										981
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"color_scheme": "Packages/User/Color Highlighter/themes/Monokai.tmTheme",
							"syntax": "Packages/Laravel Blade Highlighter/blade.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 240.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "resources/views/split/step3.blade.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1764,
						"regions":
						{
						},
						"selection":
						[
							[
								1612,
								1612
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										1613,
										1618
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/tag.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										1613,
										1618
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"color_scheme": "Packages/User/Color Highlighter/themes/Monokai.tmTheme",
							"syntax": "Packages/Laravel Blade Highlighter/blade.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "resources/views/split/step4.blade.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1488,
						"regions":
						{
						},
						"selection":
						[
							[
								817,
								817
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										814,
										816
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/tag.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										290,
										292
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"color_scheme": "Packages/User/Color Highlighter/themes/Monokai.tmTheme",
							"syntax": "Packages/Laravel Blade Highlighter/blade.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": ".env",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 542,
						"regions":
						{
						},
						"selection":
						[
							[
								542,
								542
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 28.0
	},
	"input":
	{
		"height": 38.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "configuratore.sublime-project",
	"replace":
	{
		"height": 52.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"splitcontr",
				"app\\Http\\Controllers\\SplitController.php"
			],
			[
				"en.jso",
				"resources\\assets\\js\\lang\\en.json"
			],
			[
				"splitcon",
				"app\\Http\\Controllers\\SplitController.php"
			],
			[
				"step3.bl",
				"resources\\views\\m50\\step3.blade.php"
			],
			[
				"step3.",
				"resources\\assets\\js\\split\\step3.js"
			],
			[
				"web",
				"routes\\web.php"
			],
			[
				"en.js",
				"resources\\assets\\js\\lang\\en.json"
			],
			[
				"split",
				"app\\Http\\Controllers\\SplitController.php"
			],
			[
				"web.",
				"routes\\web.php"
			],
			[
				"provider",
				"app\\Providers\\AppServiceProvider.php"
			],
			[
				"api",
				"routes\\api.php"
			],
			[
				"drawert",
				"database\\seeds\\DrawerTableSeeder.php"
			],
			[
				"drawers",
				"database\\seeds\\DrawerTableSeeder.php"
			],
			[
				"create_",
				"database\\migrations\\2017_01_27_154253_create_drawerstypes_table.php"
			],
			[
				"app",
				"config\\app.php"
			],
			[
				"web.php",
				"routes\\web.php"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 490.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"$(DESTDIR)$(PREFIX)/include/%.h:"
			]
		],
		"width": 1257.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 503.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
